---
description: Design System Tokens - Applies to tokens.ts and all files that use design tokens for consistent theming and styling
alwaysApply: true
---
# Design System Tokens

Este documento define como trabalhar com design tokens no sistema.

## O que são Design Tokens?

Design tokens são **valores nomeados** que representam decisões de design visual:
- Cores
- Espaçamentos
- Tipografia
- Sombras
- Raios de borda
- Durações de animação

**Benefícios:**
- Consistência visual em todo o sistema
- Manutenção centralizada
- Themes (light/dark) automáticos
- Alterações propagam automaticamente

## Estrutura de Tokens

### Arquivo Principal: `tokens.ts`

```typescript
import { createTokens } from '@tamagui/core'

export const tokens = createTokens({
  // Cores
  color: {
    // Cores semânticas
    primary: '#007AFF',
    secondary: '#5856D6',
    
    // Cores funcionais
    success: '#34C759',
    warning: '#FF9500',
    danger: '#FF3B30',
    info: '#007AFF',
    
    // Escala de cinzas
    white: '#FFFFFF',
    black: '#000000',
    gray50: '#FAFAFA',
    gray100: '#F5F5F5',
    gray200: '#E5E5E5',
    gray300: '#D4D4D4',
    gray400: '#A3A3A3',
    gray500: '#737373',
    gray600: '#525252',
    gray700: '#404040',
    gray800: '#262626',
    gray900: '#171717',
    
    // Cores contextuais (mudam com theme)
    background: '#FFFFFF',
    foreground: '#000000',
    border: '#E5E5E5',
    card: '#FFFFFF',
    muted: '#F5F5F5',
    mutedForeground: '#737373',
  },
  
  // Espaçamentos
  space: {
    0: 0,
    1: 4,
    2: 8,
    3: 12,
    4: 16,
    5: 20,
    6: 24,
    7: 28,
    8: 32,
    9: 36,
    10: 40,
    12: 48,
    14: 56,
    16: 64,
    20: 80,
    24: 96,
    28: 112,
    32: 128,
  },
  
  // Tamanhos de fonte
  fontSize: {
    xs: 12,
    sm: 14,
    md: 16,
    lg: 18,
    xl: 20,
    '2xl': 24,
    '3xl': 30,
    '4xl': 36,
    '5xl': 48,
  },
  
  // Famílias de fonte
  fontFamily: {
    body: 'RobotoFlex',
    heading: 'GeladaRC3',
    mono: 'monospace',
  },
  
  // Line heights
  lineHeight: {
    xs: 16,
    sm: 20,
    md: 24,
    lg: 28,
    xl: 32,
  },
  
  // Font weights
  fontWeight: {
    normal: '400',
    medium: '500',
    semibold: '600',
    bold: '700',
    black: '900',
  },
  
  // Border radius
  radius: {
    0: 0,
    1: 4,
    2: 8,
    3: 12,
    4: 16,
    5: 20,
    full: 9999,
  },
  
  // Tamanhos (width/height)
  size: {
    0: 0,
    1: 4,
    2: 8,
    3: 12,
    4: 16,
    5: 20,
    6: 24,
    8: 32,
    10: 40,
    12: 48,
    14: 56,
    16: 64,
    20: 80,
  },
  
  // Z-index
  zIndex: {
    0: 0,
    10: 10,
    20: 20,
    30: 30,
    40: 40,
    50: 50,
  },
})
```

## Usando Tokens

### Em Styled Components

```typescript
import { styled, Stack } from '@tamagui/core'

// ✅ DO - Usar tokens com $ prefix
export const Button = styled(Stack, {
  backgroundColor: '$primary',        // Color token
  padding: '$3',                      // Space token
  borderRadius: '$2',                 // Radius token
  fontSize: '$md',                    // Font size token
  fontFamily: '$body',                // Font family token
  
  hoverStyle: {
    backgroundColor: '$primaryDark',  // Token variant
  },
})

// ❌ DON'T - Hardcode valores
export const Button = styled(Stack, {
  backgroundColor: '#007AFF',         // ❌ Magic color
  padding: 12,                        // ❌ Magic number
})
```

### Em Props

```typescript
// ✅ DO - Passar tokens via props
<Button
  backgroundColor="$primary"
  padding="$3"
  borderRadius="$2"
>
  Click me
</Button>

// ❌ DON'T - Hardcode
<Button
  backgroundColor="#007AFF"
  padding={12}
>
  Click me
</Button>
```

### Acessar Valores Diretamente

```typescript
import { tokens } from '@/tokens'

// Quando precisar do valor real (raro)
const primaryColor = tokens.color.primary  // '#007AFF'
const spacing = tokens.space[3]            // 12
```

## Nomenclatura de Tokens

### Cores

```typescript
// ✅ DO - Nomes semânticos
primary       // Cor principal da marca
secondary     // Cor secundária
success       // Verde para sucesso
danger        // Vermelho para erro
warning       // Amarelo para avisos

// ✅ DO - Escalas numéricas para variações
gray50        // Mais claro
gray100
gray200
// ...
gray900       // Mais escuro

// ✅ DO - Cores contextuais (theme-aware)
background    // Background principal
foreground    // Texto principal
border        // Bordas
muted         // Background secundário
mutedForeground // Texto secundário

// ❌ DON'T - Nomes baseados em cor
lightBlue
darkRed
greenButton
```

### Espaçamentos

```typescript
// ✅ DO - Escala numérica consistente
0: 0
1: 4
2: 8
3: 12
4: 16
5: 20
// ...

// ❌ DON'T - Nomes descritivos
small: 8
medium: 16
large: 24
```

### Font Sizes

```typescript
// ✅ DO - Escala de tamanho com sufixo xl
xs: 12
sm: 14
md: 16
lg: 18
xl: 20
'2xl': 24
'3xl': 30

// ❌ DON'T - Nomes contextuais
button: 16
heading: 24
caption: 12
```

## Themes

### Definindo Themes

```typescript
// tamagui.config.ts
import { createTamagui } from '@tamagui/core'
import { tokens } from './tokens'

export default createTamagui({
  tokens,
  
  themes: {
    // Light theme
    light: {
      background: tokens.color.white,
      foreground: tokens.color.black,
      primary: tokens.color.primary,
      border: tokens.color.gray200,
      muted: tokens.color.gray100,
      mutedForeground: tokens.color.gray600,
    },
    
    // Dark theme
    dark: {
      background: tokens.color.gray900,
      foreground: tokens.color.white,
      primary: tokens.color.primary,
      border: tokens.color.gray700,
      muted: tokens.color.gray800,
      mutedForeground: tokens.color.gray400,
    },
  },
})
```

### Usando Themes

```typescript
import { Theme } from '@tamagui/core'

// Aplicar theme específico
<Theme name="dark">
  <Card />
</Theme>

// Inverter theme atual
<Theme inverse>
  <Card />
</Theme>

// Componente automaticamente usa tokens do theme ativo
export const Card = styled(Stack, {
  backgroundColor: '$background',  // Muda com o theme
  color: '$foreground',            // Muda com o theme
  borderColor: '$border',          // Muda com o theme
})
```

## Token Variants

### Variações de Cor

Para hover, pressed, etc:

```typescript
color: {
  primary: '#007AFF',
  primaryDark: '#0051D5',     // Hover
  primaryDarker: '#003D9F',   // Pressed
  primaryLight: '#4DA1FF',    // Light variant
  primaryLighter: '#99CCFF',  // Lighter variant
}
```

**Uso:**

```typescript
export const Button = styled(Stack, {
  backgroundColor: '$primary',
  
  hoverStyle: {
    backgroundColor: '$primaryDark',
  },
  
  pressStyle: {
    backgroundColor: '$primaryDarker',
  },
})
```

## Tokens Responsivos

### Media Queries com Tokens

```typescript
export const Container = styled(Stack, {
  padding: '$3',           // Mobile
  
  $gtSm: {
    padding: '$4',         // Tablet
  },
  
  $gtMd: {
    padding: '$6',         // Desktop
  },
})
```

### Tokens Diferentes por Breakpoint

```typescript
// tokens.ts
export const tokens = createTokens({
  space: {
    // Mobile-first
    containerPadding: 16,
    
    // Tablet
    '$gtSm': {
      containerPadding: 24,
    },
    
    // Desktop
    '$gtMd': {
      containerPadding: 32,
    },
  },
})
```

## Validação de Tokens

### TypeScript Type Safety

```typescript
import type { Tokens } from '@tamagui/core'

// Tokens são tipados
const validToken: Tokens['color'] = '$primary'      // ✅ OK
const invalidToken: Tokens['color'] = '$notExists' // ❌ Error
```

### Runtime Validation

```typescript
// Verificar se token existe
const isValidToken = (token: string): boolean => {
  return token in tokens.color
}

// Fallback para token inválido
const getColor = (token: string): string => {
  return tokens.color[token] ?? tokens.color.primary
}
```

## Best Practices

### 1. Sempre Use Tokens

```typescript
// ✅ DO
backgroundColor: '$primary'
padding: '$3'
borderRadius: '$2'

// ❌ DON'T
backgroundColor: '#007AFF'
padding: 12
borderRadius: 8
```

### 2. Tokens Semânticos

```typescript
// ✅ DO - Significado claro
$primary      // Cor principal
$success      // Feedback positivo
$danger       // Feedback negativo
$background   // Background contextual

// ❌ DON'T - Baseado em implementação
$blue
$green
$red
$white
```

### 3. Escala Consistente

```typescript
// ✅ DO - Progressão previsível
0: 0
1: 4
2: 8
3: 12
4: 16
5: 20

// ❌ DON'T - Valores aleatórios
small: 7
medium: 15
large: 23
```

### 4. Theme-Aware Colors

```typescript
// ✅ DO - Use cores contextuais que mudam com theme
backgroundColor: '$background'
color: '$foreground'
borderColor: '$border'

// ⚠️ CAREFUL - Cores fixas não mudam com theme
backgroundColor: '$white'  // Sempre branco, mesmo em dark mode
```

### 5. Documentar Tokens Customizados

```typescript
export const tokens = createTokens({
  color: {
    /**
     * Cor primária da marca
     * Uso: Botões primários, links, elementos de destaque
     */
    primary: '#007AFF',
    
    /**
     * Cor de alerta crítico
     * Uso: Erros, mensagens de perigo, ações destrutivas
     */
    danger: '#FF3B30',
  },
})
```

## Migração de Valores Hardcoded

### Processo

1. **Identificar valores hardcoded:**
   ```typescript
   // Encontrar
   backgroundColor: '#007AFF'
   padding: 12
   ```

2. **Verificar se token existe:**
   ```typescript
   // Consultar tokens.ts
   color.primary: '#007AFF'  // ✅ Existe
   space[3]: 12              // ✅ Existe
   ```

3. **Substituir por token:**
   ```typescript
   backgroundColor: '$primary'
   padding: '$3'
   ```

4. **Criar token se não existir:**
   ```typescript
   // Se não existir token adequado, adicionar ao tokens.ts
   color: {
     // ...
     brandPurple: '#5856D6',  // Novo token
   }
   ```

## Enforcement

Code reviews devem verificar:
- Nenhum valor hardcoded de cor, espaçamento, etc
- Todos os valores vêm de tokens
- Novos tokens seguem convenções de nomenclatura
- Tokens semânticos (não baseados em cor)
- Escalas consistentes
- Documentação de tokens customizados
- Uso de cores theme-aware quando apropriado
