---
description: Design System Tokens Architecture - 3-Layer Token System for maintainable and scalable design tokens
alwaysApply: true
---
# Design System Tokens - Arquitetura de 3 Camadas

Este documento define a arquitetura obrigat√≥ria para o sistema de tokens do Design System.

## üéØ Vis√£o Geral

**Arquitetura:** 3 Camadas (Primitive ‚Üí Semantic ‚Üí Component)

```
PRIMITIVE (valores raw)
    ‚Üì referenciado por
SEMANTIC (inten√ß√£o e contexto)
    ‚Üì referenciado por
COMPONENT (aplica√ß√£o espec√≠fica)
    ‚Üì
TAMAGUI (consumo final)
```

**Benef√≠cios:**
- ‚úÖ **Fonte √∫nica de verdade** (zero duplica√ß√£o)
- ‚úÖ **Manuten√ß√£o centralizada** (mudar em 1 lugar)
- ‚úÖ **Rastreabilidade clara** (sempre sabe a origem)
- ‚úÖ **Flexibilidade de temas** (light/dark modes)
- ‚úÖ **Type-safe** (TypeScript valida tudo)

---

## üìê CAMADA 1: PRIMITIVE TOKENS

### O que s√£o

**Valores brutos (raw)** - a fonte √∫nica de verdade. Definidos UMA √öNICA VEZ.

### Caracter√≠sticas

- ‚úÖ Valores literais (hex, pixels, strings)
- ‚úÖ Nomes descritivos (zeYellow, gray800, successGreen)
- ‚úÖ Definidos uma √∫nica vez
- ‚úÖ Nunca modificados
- ‚ùå **NUNCA usar diretamente em componentes**
- ‚ùå **NUNCA expor no export p√∫blico**

### Estrutura

```typescript
const primitive = {
  /**
   * CORES PRIMITIVAS
   */
  color: {
    // Brand - Amarelo Z√©
    zeYellow: '#ffcc00',
    zeYellowDark: '#cca300',
    zeYellowLight: '#ffe680',
    
    // Neutral Colors
    black: '#000000',
    white: '#ffffff',
    
    // Gray Scale
    gray900: '#1c1c1f',
    gray800: '#333333',
    gray700: '#19191b',
    gray500: '#888888',
    gray300: '#bbbbbb',
    gray200: '#eeeeee',
    gray100: '#f7f7f7',
    
    // Error - Red
    red: '#e91935',
    redDark: '#bc1229',
    redLight: '#f48c9a',
    redLightest: '#fde8eb',
    
    // Success - Green
    successGreen: '#2c855f',
    successGreenDark: '#1f5d42',
    successGreenLight: '#e6f7f0',
    
    // Transparency - Black Alpha
    transparent: '#00000000',
    blackAlpha10: '#0000001a',
    blackAlpha20: '#00000033',
    blackAlpha50: '#00000080',
    blackAlpha80: '#000000cc',
  },
  
  /**
   * ESPA√áAMENTOS PRIMITIVOS
   */
  space: {
    0: 0,
    2: 2,
    4: 4,
    8: 8,
    12: 12,
    16: 16,
    20: 20,
    24: 24,
    32: 32,
    40: 40,
    48: 48,
    64: 64,
  },
  
  /**
   * TAMANHOS PRIMITIVOS
   */
  size: {
    0: 0,
    4: 4,
    8: 8,
    12: 12,
    16: 16,
    20: 20,
    24: 24,
    28: 28,
    32: 32,
    40: 40,
    44: 44,
    48: 48,
    64: 64,
  },
  
  /**
   * BORDER RADIUS PRIMITIVOS
   */
  radius: {
    0: 0,
    4: 4,
    8: 8,
    12: 12,
    16: 16,
    20: 20,
    24: 24,
    round: 1000,
  },
  
  /**
   * TIPOGRAFIA PRIMITIVA
   */
  typography: {
    fontFamily: {
      display: 'Gelada RC3, Roboto Flex, Roboto, system-ui, -apple-system, sans-serif',
      main: 'Roboto Flex, Roboto, system-ui, -apple-system, sans-serif',
      body: 'Roboto Flex, Roboto, system-ui, -apple-system, sans-serif',
    },
    fontSize: {
      extraSmall: 12,
      small: 14,
      medium: 16,
      large: 20,
      extraLarge: 24,
    },
    fontWeight: {
      regular: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      black: 900,
    },
    lineHeight: {
      tight: 16,
      regular: 20,
      comfortable: 24,
    },
  },
} as const
```

### Regras de Nomenclatura

```typescript
// ‚úÖ DO - Nomes descritivos que indicam o valor
zeYellow          // Nome da marca + cor
gray800           // Fam√≠lia + peso/escala
successGreen      // Prop√≥sito + cor
blackAlpha50      // Cor + tipo + opacidade

// ‚ùå DON'T - Nomes gen√©ricos ou sem√¢nticos
primary           // Isso √© semantic!
buttonColor       // Isso √© component!
mainBackground    // Isso √© semantic!
```

---

## üé® CAMADA 2: SEMANTIC TOKENS

### O que s√£o

**Tokens sem√¢nticos** - definem INTEN√á√ÉO e CONTEXTO de uso.

### Caracter√≠sticas

- ‚úÖ Nomes por prop√≥sito (brand.primary, text.secondary, surface.primary)
- ‚úÖ Referencia APENAS primitive tokens
- ‚úÖ Usa helper `ref()` para rastreabilidade
- ‚úÖ Facilita mudan√ßas de tema
- ‚ùå **NUNCA valores hardcoded**
- ‚ùå **NUNCA referencia component tokens**

### Estrutura

```typescript
const semantic = {
  /**
   * CORES SEM√ÇNTICAS - Por Inten√ß√£o de Uso
   */
  color: {
    // Brand Identity
    brand: {
      primary: ref(primitive.color.zeYellow),
      primaryHover: ref(primitive.color.zeYellowDark),
      primaryActive: ref(primitive.color.zeYellowLight),
      primaryDisabled: ref(primitive.color.gray200),
      
      secondary: ref(primitive.color.zeCompensaPurple),
      secondaryLight: ref(primitive.color.zeCompensaPurpleLight),
    },
    
    // Feedback/Status Colors
    feedback: {
      // Error
      error: ref(primitive.color.red),
      errorStrong: ref(primitive.color.redDark),
      errorSoft: ref(primitive.color.redLight),
      errorBg: ref(primitive.color.redLightest),
      
      // Success
      success: ref(primitive.color.successGreen),
      successStrong: ref(primitive.color.successGreenDark),
      successBg: ref(primitive.color.successGreenLight),
    },
    
    // Text Hierarchy
    text: {
      primary: ref(primitive.color.gray800),
      secondary: ref(primitive.color.gray500),
      tertiary: ref(primitive.color.gray400),
      disabled: ref(primitive.color.gray500),
      inverse: ref(primitive.color.white),
      onBrand: ref(primitive.color.black),
    },
    
    // Surface/Background
    surface: {
      primary: ref(primitive.color.white),
      secondary: ref(primitive.color.gray100),
      tertiary: ref(primitive.color.gray200),
      overlay: ref(primitive.color.blackAlpha50),
      overlayStrong: ref(primitive.color.blackAlpha80),
      transparent: ref(primitive.color.transparent),
    },
    
    // Border
    border: {
      default: ref(primitive.color.gray300),
      strong: ref(primitive.color.gray500),
      subtle: ref(primitive.color.gray200),
    },
    
    // Interactive States (gen√©ricos)
    interactive: {
      default: ref(primitive.color.gray800),
      hover: ref(primitive.color.gray700),
      active: ref(primitive.color.gray400),
      disabled: ref(primitive.color.gray500),
      
      // Backgrounds para interactive
      bgHover: ref(primitive.color.gray100),
      bgActive: ref(primitive.color.gray200),
      
      // Alphas para overlays
      alphaHover: ref(primitive.color.gray800Alpha20),
      alphaActive: ref(primitive.color.gray800Alpha20),
    },
  },
  
  /**
   * ESPA√áAMENTOS SEM√ÇNTICOS
   */
  spacing: {
    // Component spacing
    component: {
      gapSmall: ref(primitive.space[8]),
      gapMedium: ref(primitive.space[12]),
      gapLarge: ref(primitive.space[16]),
      
      paddingSmall: ref(primitive.space[8]),
      paddingMedium: ref(primitive.space[12]),
      paddingLarge: ref(primitive.space[16]),
    },
    
    // Layout spacing
    layout: {
      sectionGap: ref(primitive.space[24]),
      containerPadding: ref(primitive.space[16]),
    },
  },
  
  /**
   * TAMANHOS SEM√ÇNTICOS
   */
  sizing: {
    // Interactive elements (acessibilidade - WCAG)
    interactive: {
      minHeight: ref(primitive.size[44]),
      minWidth: ref(primitive.size[44]),
    },
    
    // Icon sizes
    icon: {
      small: ref(primitive.size[20]),
      medium: ref(primitive.size[24]),
      large: ref(primitive.size[28]),
    },
  },
  
  /**
   * BORDER RADIUS SEM√ÇNTICOS
   */
  radius: {
    component: {
      small: ref(primitive.radius[8]),
      smallMedium: ref(primitive.radius[12]),
      medium: ref(primitive.radius[16]),
      large: ref(primitive.radius[20]),
      circular: ref(primitive.radius.round),
    },
  },
} as const
```

### Regras de Nomenclatura

```typescript
// ‚úÖ DO - Nomes por inten√ß√£o/contexto
semantic.color.brand.primary        // Identidade da marca
semantic.color.text.secondary       // Hierarquia de texto
semantic.color.feedback.error       // Status/feedback
semantic.color.surface.overlay      // Tipo de superf√≠cie
semantic.spacing.component.gap      // Prop√≥sito do espa√ßamento

// ‚ùå DON'T - Nomes baseados em valores
semantic.color.yellow500            // Isso √© primitive!
semantic.color.big                  // Vago, sem contexto
semantic.spacing.pixels16           // Baseado em implementa√ß√£o
```

---

## üß© CAMADA 3: COMPONENT TOKENS

### O que s√£o

**Tokens de componentes** - aplica√ß√£o espec√≠fica por componente.

### Caracter√≠sticas

- ‚úÖ Organizado por: component ‚Üí property ‚Üí variant ‚Üí state
- ‚úÖ Referencia APENAS semantic tokens
- ‚úÖ Usa helper `ref()` para rastreabilidade
- ‚úÖ Define como cada componente usa os tokens
- ‚ùå **NUNCA referencia primitive diretamente**
- ‚ùå **NUNCA valores hardcoded**

### Estrutura

```typescript
export const tokens = {
  /**
   * ‚ö†Ô∏è N√ÉO EXPOR PRIMITIVOS!
   */
  // ‚ùå color: primitive.color,  // NUNCA FAZER ISSO!
  // ‚ùå space: primitive.space,
  
  /**
   * ‚úÖ Expor semantic para casos avan√ßados
   */
  semantic: semantic,
  
  /**
   * BUTTON
   */
  button: {
    size: {
      small: {
        height: 36,
        paddingVertical: ref(semantic.spacing.component.paddingSmall),
        paddingHorizontal: ref(semantic.spacing.component.paddingLarge),
        borderRadius: ref(semantic.radius.component.smallMedium),
        fontSize: ref(primitive.typography.fontSize.small),
        lineHeight: ref(primitive.typography.lineHeight.regular),
        iconSize: ref(semantic.sizing.icon.small),
        gap: ref(semantic.spacing.component.gapSmall),
        minWidth: ref(semantic.sizing.interactive.minWidth),
      },
      medium: {
        height: 48,
        paddingVertical: ref(semantic.spacing.component.paddingMedium),
        paddingHorizontal: ref(semantic.spacing.component.paddingLarge),
        borderRadius: ref(semantic.radius.component.medium),
        fontSize: ref(primitive.typography.fontSize.medium),
        lineHeight: ref(primitive.typography.lineHeight.comfortable),
        iconSize: ref(semantic.sizing.icon.medium),
        gap: ref(semantic.spacing.component.gapSmall),
        minWidth: ref(semantic.sizing.interactive.minWidth),
      },
    },
    
    variant: {
      primary: {
        normal: {
          bg: ref(semantic.color.brand.primary),
          color: ref(semantic.color.text.onBrand),
          borderColor: ref(semantic.color.brand.primary),
          borderWidth: 0,
          iconColor: ref(semantic.color.text.onBrand),
        },
        hover: {
          bg: ref(semantic.color.brand.primaryHover),
          color: ref(semantic.color.text.onBrand),
          borderColor: ref(semantic.color.brand.primaryHover),
          borderWidth: 0,
          iconColor: ref(semantic.color.text.onBrand),
        },
        focus: {
          bg: ref(semantic.color.brand.primaryHover),
          color: ref(semantic.color.text.onBrand),
          borderColor: ref(semantic.color.brand.primaryHover),
          borderWidth: 2,
          iconColor: ref(semantic.color.text.onBrand),
        },
        disabled: {
          bg: ref(semantic.color.brand.primaryDisabled),
          color: ref(semantic.color.text.disabled),
          borderColor: ref(semantic.color.brand.primaryDisabled),
          borderWidth: 0,
          iconColor: ref(semantic.color.text.disabled),
        },
      },
      
      secondary: {
        normal: {
          bg: ref(semantic.color.surface.transparent),
          color: ref(semantic.color.text.primary),
          borderColor: ref(semantic.color.border.default),
          borderWidth: 1,
          iconColor: ref(semantic.color.text.primary),
        },
        // ... outros estados
      },
    },
  },
  
  /**
   * ICON
   */
  icon: {
    size: {
      small: ref(semantic.sizing.icon.small),
      medium: ref(semantic.sizing.icon.medium),
      large: ref(semantic.sizing.icon.large),
    },
    color: {
      normal: ref(semantic.color.text.primary),
    },
  },
  
  /**
   * CHECKBOX
   */
  checkbox: {
    size: {
      small: {
        iconPlateSize: ref(semantic.sizing.icon.small),
        iconPlateBorderRadius: ref(semantic.radius.component.small),
        gap: ref(semantic.spacing.component.gapSmall),
      },
      medium: {
        iconPlateSize: ref(semantic.sizing.icon.medium),
        iconPlateBorderRadius: ref(semantic.radius.component.smallMedium),
        gap: ref(semantic.spacing.component.gapSmall),
      },
    },
    
    state: {
      normal: {
        enabled: {
          iconPlateIconColor: ref(semantic.color.text.primary),
          textColor: ref(semantic.color.text.primary),
          bgColor: ref(semantic.color.surface.transparent),
        },
        hover: {
          iconPlateIconColor: ref(semantic.color.text.primary),
          textColor: ref(semantic.color.text.primary),
          bgColor: ref(semantic.color.interactive.bgHover),
        },
        // ... outros estados
      },
      error: {
        // ... estados de erro
      },
    },
  },
  
  // ... outros componentes
} as const
```

### Regras de Nomenclatura

```typescript
// ‚úÖ DO - Hierarquia clara: component ‚Üí property ‚Üí variant ‚Üí state
tokens.button.size.small.height
tokens.button.variant.primary.normal.bg
tokens.checkbox.state.error.hover.textColor

// ‚ùå DON'T - Estrutura flat ou inconsistente
tokens.buttonSmallHeight           // Sem hierarquia
tokens.primaryButtonBg             // Ordem errada
tokens.button.normalPrimaryBg      // Hierarquia invertida
```

---

## üîß HELPER FUNCTION: `ref()`

### Defini√ß√£o

```typescript
/**
 * Helper que resolve refer√™ncias mantendo rastreabilidade
 * Tamagui recebe o valor final, mas o c√≥digo mant√©m a refer√™ncia clara
 */
const ref = <T>(value: T): T => value
```

### Prop√≥sito

1. **Rastreabilidade Visual:**
   ```typescript
   bg: ref(semantic.color.brand.primary)  // ‚úÖ Clara origem do valor
   ```

2. **Zero Overhead:**
   ```typescript
   // √â identity function - compilador inline ela
   ref('#ffcc00')  // ‚Üí '#ffcc00' (nenhum custo runtime)
   ```

3. **Documenta√ß√£o Inline:**
   ```typescript
   // Desenvolvedor v√™: ref(semantic.color.brand.primary)
   // Tamagui recebe: '#ffcc00'
   // Melhor de ambos os mundos!
   ```

### Uso Obrigat√≥rio

```typescript
// ‚úÖ DO - Sempre usar ref()
bg: ref(semantic.color.brand.primary),
padding: ref(semantic.spacing.component.paddingMedium),
borderRadius: ref(semantic.radius.component.medium),

// ‚ùå DON'T - Valores diretos
bg: semantic.color.brand.primary,        // Perde rastreabilidade
padding: 12,                              // Hardcode!
borderRadius: primitive.radius[16],      // Quebrando camada!
```

---

## üì§ EXPORT E CONSUMO

### O que Exportar

```typescript
// tokens.ts

// ‚úÖ Export principal (component layer)
export const tokens = {
  semantic: semantic,  // ‚úÖ Para casos avan√ßados
  
  button: {...},       // ‚úÖ Component tokens
  icon: {...},
  checkbox: {...},
  // ...
} as const

// ‚úÖ Export de tipos
export type Tokens = typeof tokens
export type PrimitiveTokens = typeof primitive
export type SemanticTokens = typeof semantic

// ‚ö†Ô∏è Export de primitivos (APENAS para casos avan√ßados)
export { primitive }  // N√£o incluir no export padr√£o!

// ‚úÖ Export de semantic
export { semantic }

// ‚úÖ Export do helper
export { ref }
```

### Como Consumir

#### Em Componentes

```typescript
import { tokens } from '@/tokens'

// ‚úÖ DO - Usar tokens de componentes
export const Button = styled(Stack, {
  backgroundColor: tokens.button.variant.primary.normal.bg,
  padding: tokens.button.size.medium.paddingHorizontal,
})

// ‚ö†Ô∏è CAREFUL - Usar semantic (casos espec√≠ficos)
export const CustomComponent = styled(Stack, {
  backgroundColor: tokens.semantic.color.brand.primary,
})

// ‚ùå DON'T - Tentar usar primitivos (n√£o est√£o expostos!)
// backgroundColor: tokens.color.zeYellow,  // ‚ùå ERRO! N√£o existe!
```

#### Em tamagui.config.ts

```typescript
import { tokens } from './tokens'
import { createTamagui, createTokens } from '@tamagui/core'

// Mapear tokens do DS para formato do Tamagui
const tamaguiTokens = createTokens({
  // ‚úÖ Usar semantic, n√£o primitivos
  color: {
    primary: tokens.semantic.color.brand.primary,
    secondary: tokens.semantic.color.brand.secondary,
    background: tokens.semantic.color.surface.primary,
    // ...
  },
  space: {
    // Criar escala a partir de semantic
    1: tokens.semantic.spacing.component.gapSmall,
    2: tokens.semantic.spacing.component.gapMedium,
    3: tokens.semantic.spacing.component.gapLarge,
    // ...
  },
})

export default createTamagui({
  tokens: tamaguiTokens,
  themes: {
    light: {
      background: tokens.semantic.color.surface.primary,
      text: tokens.semantic.color.text.primary,
      // ...
    },
    dark: {
      background: tokens.semantic.color.surface.tertiary,
      text: tokens.semantic.color.text.inverse,
      // ...
    },
  },
})
```

---

## ‚úÖ ENFORCEMENT (Code Review Checklist)

### Camada Primitive

- [ ] Valores s√£o literais (hex, n√∫meros, strings)
- [ ] Nomes descritivos (zeYellow, gray800)
- [ ] Definidos uma √∫nica vez
- [ ] `as const` no final
- [ ] ‚ùå NUNCA exposto no export principal

### Camada Semantic

- [ ] Referencia APENAS primitive
- [ ] Usa `ref()` em todas as refer√™ncias
- [ ] Nomes sem√¢nticos (brand, text, feedback)
- [ ] Organizado por prop√≥sito/contexto
- [ ] ‚ùå Zero valores hardcoded
- [ ] ‚ùå N√£o referencia component tokens

### Camada Component

- [ ] Referencia APENAS semantic (nunca primitive)
- [ ] Usa `ref()` em todas as refer√™ncias
- [ ] Organizado: component ‚Üí property ‚Üí variant ‚Üí state
- [ ] Exp√µe semantic para casos avan√ßados
- [ ] ‚ùå Primitivos N√ÉO est√£o expostos
- [ ] ‚ùå Zero valores hardcoded

### Geral

- [ ] `ref()` usado em todas as refer√™ncias
- [ ] Zero duplica√ß√£o de valores
- [ ] TypeScript types exportados
- [ ] Documenta√ß√£o inline clara
- [ ] Sem erros de tipo

---

## üö´ ANTI-PATTERNS (O que N√ÉO fazer)

### ‚ùå Expor Primitivos no Export

```typescript
// ‚ùå NUNCA fazer isso!
export const tokens = {
  color: primitive.color,  // ‚ùå EXP√ïE PRIMITIVOS!
  space: primitive.space,
  
  button: {...},
}

// ‚úÖ CORRETO
export const tokens = {
  semantic: semantic,      // ‚úÖ Semantic para casos avan√ßados
  
  button: {...},           // ‚úÖ Component tokens
}
```

### ‚ùå Component Referencia Primitive Direto

```typescript
// ‚ùå NUNCA fazer isso!
button: {
  size: {
    small: {
      fontSize: ref(primitive.typography.fontSize.small),  // ‚ùå Pula semantic!
    }
  }
}

// ‚úÖ CORRETO
button: {
  size: {
    small: {
      fontSize: ref(semantic.typography.body.small.fontSize),  // ‚úÖ Usa semantic!
    }
  }
}
```

### ‚ùå Valores Hardcoded

```typescript
// ‚ùå NUNCA fazer isso!
button: {
  variant: {
    primary: {
      normal: {
        bg: '#ffcc00',  // ‚ùå Hardcode!
        padding: 12,    // ‚ùå Magic number!
      }
    }
  }
}

// ‚úÖ CORRETO
button: {
  variant: {
    primary: {
      normal: {
        bg: ref(semantic.color.brand.primary),
        padding: ref(semantic.spacing.component.paddingMedium),
      }
    }
  }
}
```

### ‚ùå N√£o Usar `ref()`

```typescript
// ‚ùå Perde rastreabilidade
bg: semantic.color.brand.primary,

// ‚úÖ CORRETO - Clara origem
bg: ref(semantic.color.brand.primary),
```

### ‚ùå Mixing de Camadas

```typescript
// ‚ùå Inconsistente
button: {
  size: {
    small: {
      fontSize: ref(primitive.typography.fontSize.small),  // ‚ùå Primitive
      padding: ref(semantic.spacing.component.paddingSmall),  // ‚úÖ Semantic
    }
  }
}

// ‚úÖ CORRETO - Sempre semantic
button: {
  size: {
    small: {
      fontSize: ref(semantic.typography.body.small.fontSize),  // ‚úÖ Semantic
      padding: ref(semantic.spacing.component.paddingSmall),  // ‚úÖ Semantic
    }
  }
}
```

---

## üéì Exemplo Completo

Ver `tokens.ts` para implementa√ß√£o de refer√™ncia completa seguindo esta arquitetura.

---

## üìö Refer√™ncias

- `014-ds-tokens.mdc` ‚Üí Uso pr√°tico de tokens em componentes
- `012-ds-tamagui-patterns.mdc` ‚Üí Integra√ß√£o com Tamagui
- `tokens.ts` ‚Üí Implementa√ß√£o de refer√™ncia

---

**√öltima atualiza√ß√£o:** 23/10/2025  
**Vers√£o:** 1.0  
**Autor:** Design System Team - Z√© Delivery
